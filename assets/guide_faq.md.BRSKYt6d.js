import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.CbO9FoPk.js";const g=JSON.parse('{"title":"‚ùì FAQ: Common Issues & Solutions","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/faq.md","filePath":"guide/faq.md","lastUpdated":1760082971000}'),e={name:"guide/faq.md"};function l(p,s,h,o,r,k){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="‚ùì-faq-common-issues-solutions" tabindex="-1">‚ùì FAQ: Common Issues &amp; Solutions <a class="header-anchor" href="#‚ùì-faq-common-issues-solutions" aria-label="Permalink to &quot;‚ùì FAQ: Common Issues &amp; Solutions&quot;">‚Äã</a></h1><p>Find answers to frequently asked questions and solutions to common problems with Nuxt I18n Micro.</p><h2 id="üöÄ-getting-started-issues" tabindex="-1">üöÄ Getting Started Issues <a class="header-anchor" href="#üöÄ-getting-started-issues" aria-label="Permalink to &quot;üöÄ Getting Started Issues&quot;">‚Äã</a></h2><h3 id="‚ùì-what-if-a-route-doesn-t-load" tabindex="-1">‚ùì What if a route doesn&#39;t load? <a class="header-anchor" href="#‚ùì-what-if-a-route-doesn-t-load" aria-label="Permalink to &quot;‚ùì What if a route doesn&#39;t load?&quot;">‚Äã</a></h3><p>When using <code>Nuxt I18n Micro</code>, certain routes might not load as expected, especially if the router doesn&#39;t automatically assign a name to a route in subfolders.</p><p><strong>Solution:</strong> To address this, manually define the route name for the page by adding the following to the corresponding Vue file:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">definePageMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pageName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>This ensures the route is properly registered, enabling seamless navigation within the application.</p><h3 id="‚ùì-why-does-t-or-other-i18n-composables-not-work-in-nuxt-plugins" tabindex="-1">‚ùì Why does <code>$t</code> or other i18n composables not work in Nuxt plugins? <a class="header-anchor" href="#‚ùì-why-does-t-or-other-i18n-composables-not-work-in-nuxt-plugins" aria-label="Permalink to &quot;‚ùì Why does \`$t\` or other i18n composables not work in Nuxt plugins?&quot;">‚Äã</a></h3><p>Nuxt I18n composables (<code>$t</code>, <code>$getLocale</code>, <code>$localePath</code>, etc.) may not work as expected within Nuxt plugins or utility functions, resulting in runtime errors.</p><p><strong>Cause and Solution:</strong> Nuxt composables require specific contexts (e.g., Nuxt hooks or Vue setup functions) to access the Nuxt instance. If used outside of these contexts (e.g., in utility functions or plugins), the following error might appear in the console:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[nuxt] A composable that requires access to the Nuxt instance was called outside of a plugin, Nuxt hook, Nuxt middleware, or Vue setup function. This is probably not a Nuxt bug. Find out more at https://nuxt.com/docs/guide/concepts/auto-imports#vue-and-nuxt-composables</span></span></code></pre></div><p><strong>Solution 1: Use <code>runWithContext</code></strong> To call i18n composables after an asynchronous operation, use <a href="https://nuxt.com/docs/api/composables/use-nuxt-app#runwithcontext" target="_blank" rel="noreferrer"><code>runWithContext</code></a> to preserve the necessary context.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nuxtApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runWithContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test_key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p><strong>Solution 2: Retrieve Value First</strong> Alternatively, retrieve the translation value first, then pass it to a utility function.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nuxtApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common.errors.unknown.title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>Solution 3: Pass Translation Keys in Services</strong> In services or utility functions, pass the translation keys instead of using <code>$t</code> directly. Then, fetch the translation in the component.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common.errors.unknown.title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;common.errors.unknown.message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i18n: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="üåê-translation-issues" tabindex="-1">üåê Translation Issues <a class="header-anchor" href="#üåê-translation-issues" aria-label="Permalink to &quot;üåê Translation Issues&quot;">‚Äã</a></h2><h3 id="‚ùì-why-do-translations-break-during-page-transitions-especially-with-defineasynccomponent" tabindex="-1">‚ùì Why do translations break during page transitions, especially with <code>defineAsyncComponent</code>? <a class="header-anchor" href="#‚ùì-why-do-translations-break-during-page-transitions-especially-with-defineasynccomponent" aria-label="Permalink to &quot;‚ùì Why do translations break during page transitions, especially with \`defineAsyncComponent\`?&quot;">‚Äã</a></h3><p>When using <code>nuxt-i18n-micro</code> with page transitions, translations may briefly stop working during the transition. This issue occurs because the route changes before the transition completes, causing translations for the new page to load while the old page is still visible.</p><p><strong>Root Cause:</strong></p><ul><li>Page transitions cause route changes before translations are fully loaded</li><li><code>defineAsyncComponent</code> and <code>useAsyncData</code> can delay translation loading</li><li>Translation keys may appear as raw paths during loading</li></ul><p><strong>Solution 1: Enable Experimental Fallback (Recommended)</strong></p><p>Use the experimental <code>i18nPreviousPageFallback</code> feature to automatically fall back to previous page translations during transitions:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i18n: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    experimental: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      i18nPreviousPageFallback: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>How it works:</strong></p><ul><li>Saves previous page translation information during navigation</li><li>Uses previous page translations as fallback when current page translations are not available</li><li>Cleans up previous page translations only after the new page is fully loaded</li></ul><p><strong>Solution 2: Explicit Route Context</strong></p><p>If you prefer manual control, explicitly pass the current route to <code>$_t</code>:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useNuxtApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#imports&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> route</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useNuxtApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(route)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {{ $t(&#39;page::blog-slug.title&#39;) }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Solution 3: Loading States</strong></p><p>Implement loading states to handle translation loading gracefully:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pending&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loading-skeleton&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      &lt;!-- Loading placeholder --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ $t(&#39;page.title&#39;) }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useAsyncData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;page-data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Your async data loading</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="‚ùì-why-are-translation-keys-not-resolving-during-ssr-on-vercel" tabindex="-1">‚ùì Why are translation keys not resolving during SSR on Vercel? <a class="header-anchor" href="#‚ùì-why-are-translation-keys-not-resolving-during-ssr-on-vercel" aria-label="Permalink to &quot;‚ùì Why are translation keys not resolving during SSR on Vercel?&quot;">‚Äã</a></h3><p><strong><code>$fetch</code> limitations on SSR</strong> On serverless platforms like Vercel, <code>$fetch</code> can only fetch static files from the CDN and not from the internal Nitro server. This means static translation files may not be directly accessible unless the correct base URL is set.</p><p><strong>Fix by setting <code>apiBaseUrl</code></strong> If translations are hosted externally, specify the full URL (e.g., <code>https://example.com/_locales</code>) for <code>$fetch</code> to access the translations correctly during SSR.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i18n: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiBaseUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://example.com/_locales&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="üîó-routing-navigation-issues" tabindex="-1">üîó Routing &amp; Navigation Issues <a class="header-anchor" href="#üîó-routing-navigation-issues" aria-label="Permalink to &quot;üîó Routing &amp; Navigation Issues&quot;">‚Äã</a></h2><h3 id="‚ùì-can-i-use-nuxtlink-or-i18nlink-directly-in-translation-strings" tabindex="-1">‚ùì Can I use <code>NuxtLink</code> or <code>i18nLink</code> directly in translation strings? <a class="header-anchor" href="#‚ùì-can-i-use-nuxtlink-or-i18nlink-directly-in-translation-strings" aria-label="Permalink to &quot;‚ùì Can I use \`NuxtLink\` or \`i18nLink\` directly in translation strings?&quot;">‚Äã</a></h3><p>Yes, <code>Nuxt I18n Micro</code> allows the use of <code>NuxtLink</code> or <code>i18nLink</code> within translations through the <code>&lt;i18n-t&gt;</code> component, which is especially helpful for handling grammar and RTL language requirements without splitting translation strings.</p><p><strong>Example:</strong></p><p>Translation file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Share your {link} with friends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;link_text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;translation link&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Vue template:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i18n-t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keypath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nuxt-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ name: &#39;referral&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i18n-t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keypath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;link_text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nuxt-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i18n-t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This allows dynamic links within translations while preserving proper localization structure.</p><h2 id="üèóÔ∏è-build-deployment-issues" tabindex="-1">üèóÔ∏è Build &amp; Deployment Issues <a class="header-anchor" href="#üèóÔ∏è-build-deployment-issues" aria-label="Permalink to &quot;üèóÔ∏è Build &amp; Deployment Issues&quot;">‚Äã</a></h2><h3 id="‚ùì-why-is-the-assets-locales-folder-added-to-the-server-folder" tabindex="-1">‚ùì Why is the <code>assets/_locales/</code> folder added to the server folder? <a class="header-anchor" href="#‚ùì-why-is-the-assets-locales-folder-added-to-the-server-folder" aria-label="Permalink to &quot;‚ùì Why is the \`assets/_locales/\` folder added to the server folder?&quot;">‚Äã</a></h3><p>During deployment, especially on platforms like Netlify, the build process might differ from local development. This can lead to issues where certain files or folders are missing during server-side rendering (SSR).</p><p><strong>Explanation:</strong></p><ul><li><strong>Build Process:</strong> Translation files are cached in the production folder during the build. However, on Netlify, server code moves to functions, sometimes isolating localization files.</li><li><strong>Prerendering:</strong> Prerendering does not work with <code>$fetch</code> in SSR, causing middleware to miss localization files.</li><li><strong>Server Assets:</strong> To resolve this, localization files are saved in the Nitro server assets during prerendering. They are then accessible in production directly from server assets.</li></ul><h3 id="‚ùì-why-do-i-get-a-build-error-referring-to-unhead-vue-or-an-undefined-object-especially-on-cloudflare-pages" tabindex="-1">‚ùì Why do I get a build error referring to <code>@unhead/vue</code> or an undefined object, especially on Cloudflare Pages? <a class="header-anchor" href="#‚ùì-why-do-i-get-a-build-error-referring-to-unhead-vue-or-an-undefined-object-especially-on-cloudflare-pages" aria-label="Permalink to &quot;‚ùì Why do I get a build error referring to \`@unhead/vue\` or an undefined object, especially on Cloudflare Pages?&quot;">‚Äã</a></h3><p><strong>Cause:</strong> Some projects experience build conflicts or missing dependencies when using <code>nuxt-i18n-micro</code>. In particular:</p><ul><li>Deployments on <strong>Cloudflare Pages</strong> or <strong>Cloudflare Workers</strong> may require additional compatibility flags.</li><li>Prerendering steps can fail if dependencies like <code>@unhead/vue</code> are not properly installed.</li><li>Certain modules (e.g., <strong>nuxthub</strong>, <strong>nitro-cloudflare-dev</strong>) can introduce conflicts unless configured with correct flags or dependencies.</li></ul><p><strong>Possible Solutions:</strong></p><p><strong>Solution 1: Install <code>@unhead/vue</code> manually</strong> If the build error complains about not finding <code>@unhead/vue</code>, install it directly in your project&#39;s dependencies:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-vEjMT" id="tab-GKU_ZaD" checked><label data-title="npm" for="tab-GKU_ZaD">npm</label><input type="radio" name="group-vEjMT" id="tab-mlJ7KQg"><label data-title="yarn" for="tab-mlJ7KQg">yarn</label><input type="radio" name="group-vEjMT" id="tab-kO5LIIP"><label data-title="pnpm" for="tab-kO5LIIP">pnpm</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @unhead/vue</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @unhead/vue</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @unhead/vue</span></span></code></pre></div></div></div><p>This ensures it&#39;s available during the Nitro prerender phase.</p><p><strong>Solution 2: Add Cloudflare compatibility flags</strong> When using Cloudflare Pages or Cloudflare Workers, Node.js compatibility is often disabled by default. Enable it in your <code>wrangler.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compatibility_flags = [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodejs_compat_v2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><p>This flag allows many Node.js modules (including those used by <code>nuxt-i18n-micro</code>) to run smoothly.</p><h2 id="üîß-configuration-compatibility" tabindex="-1">üîß Configuration &amp; Compatibility <a class="header-anchor" href="#üîß-configuration-compatibility" aria-label="Permalink to &quot;üîß Configuration &amp; Compatibility&quot;">‚Äã</a></h2><h3 id="‚ùì-is-nuxt-i18n-micro-inspired-by-vue-i18n-what-about-modifiers" tabindex="-1">‚ùì Is <code>Nuxt I18n Micro</code> inspired by <code>vue-i18n</code>? What about modifiers? <a class="header-anchor" href="#‚ùì-is-nuxt-i18n-micro-inspired-by-vue-i18n-what-about-modifiers" aria-label="Permalink to &quot;‚ùì Is \`Nuxt I18n Micro\` inspired by \`vue-i18n\`? What about modifiers?&quot;">‚Äã</a></h3><p>While <code>Nuxt I18n Micro</code> serves as a performance alternative to <code>nuxt-i18n</code>, it&#39;s built independently of <code>vue-i18n</code>. While some method names and parameters may be similar, the underlying functionality differs significantly.</p><p><strong>Modifiers</strong>: The maintainer initially considered modifiers, but concluded that components like <code>&lt;i18n-t&gt;</code> and <code>&lt;i18n-link&gt;</code> effectively address those needs.</p><p>For example:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i18n-t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keypath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;feedback.text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nuxt-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ name: &#39;index&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i18n-t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keypath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;feedback.link&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nuxt-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i18n-t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This approach is flexible, so releasing modifiers is currently unnecessary. However, modifiers may be added in future releases if there is demand.</p>`,69)])])}const E=i(e,[["render",l]]);export{g as __pageData,E as default};
