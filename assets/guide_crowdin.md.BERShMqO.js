import{_ as a,c as s,o as n,ag as e}from"./chunks/framework.CbO9FoPk.js";const u=JSON.parse('{"title":"🌐 Crowdin Integration Guide","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/crowdin.md","filePath":"guide/crowdin.md","lastUpdated":1726410447000}'),t={name:"guide/crowdin.md"};function o(l,i,r,d,h,p){return n(),s("div",null,[...i[0]||(i[0]=[e(`<h1 id="🌐-crowdin-integration-guide" tabindex="-1">🌐 Crowdin Integration Guide <a class="header-anchor" href="#🌐-crowdin-integration-guide" aria-label="Permalink to &quot;🌐 Crowdin Integration Guide&quot;">​</a></h1><h2 id="📖-introduction" tabindex="-1">📖 Introduction <a class="header-anchor" href="#📖-introduction" aria-label="Permalink to &quot;📖 Introduction&quot;">​</a></h2><p>Integrating Crowdin into your project streamlines the localization and translation process, making it easier to manage translations across multiple languages and platforms. This guide provides a step-by-step walkthrough on setting up Crowdin with your project, including configuration, uploading sources, and downloading translations.</p><h2 id="🔧-installation-and-setup" tabindex="-1">🔧 Installation and Setup <a class="header-anchor" href="#🔧-installation-and-setup" aria-label="Permalink to &quot;🔧 Installation and Setup&quot;">​</a></h2><p>To get started with Crowdin, you&#39;ll need to install the Crowdin CLI globally on your machine and initialize it within your project directory.</p><h3 id="📦-installing-crowdin-cli" tabindex="-1">📦 Installing Crowdin CLI <a class="header-anchor" href="#📦-installing-crowdin-cli" aria-label="Permalink to &quot;📦 Installing Crowdin CLI&quot;">​</a></h3><p>First, install the Crowdin CLI globally using npm:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @crowdin/cli</span></span></code></pre></div><h3 id="🛠-initializing-crowdin-in-your-project" tabindex="-1">🛠 Initializing Crowdin in Your Project <a class="header-anchor" href="#🛠-initializing-crowdin-in-your-project" aria-label="Permalink to &quot;🛠 Initializing Crowdin in Your Project&quot;">​</a></h3><p>Initialize Crowdin in your project by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crowdin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>This command will guide you through the setup process, including setting your project ID, API token, and other configuration details.</p><h2 id="🗂️-configuration-guide" tabindex="-1">🗂️ Configuration Guide <a class="header-anchor" href="#🗂️-configuration-guide" aria-label="Permalink to &quot;🗂️ Configuration Guide&quot;">​</a></h2><h3 id="📄-crowdin-configuration-file-crowdin-yml" tabindex="-1">📄 Crowdin Configuration File (<code>crowdin.yml</code>) <a class="header-anchor" href="#📄-crowdin-configuration-file-crowdin-yml" aria-label="Permalink to &quot;📄 Crowdin Configuration File (\`crowdin.yml\`)&quot;">​</a></h3><p>The Crowdin configuration file (<code>crowdin.yml</code>) defines how your source files are mapped and where translations should be placed. Below is an example configuration:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YOUR_PROJECT_ID&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api_token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YOUR_API_TOKEN&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base_path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./locales&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.crowdin.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preserve_hierarchy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/en.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;translation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/%two_letters_code%.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pages/**/en.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;translation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pages/**/%two_letters_code%.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="📂-key-configuration-parameters" tabindex="-1">📂 Key Configuration Parameters <a class="header-anchor" href="#📂-key-configuration-parameters" aria-label="Permalink to &quot;📂 Key Configuration Parameters&quot;">​</a></h3><ul><li><strong><code>project_id</code></strong>: Your Crowdin project ID. This identifies the project within Crowdin where translations are managed.</li><li><strong><code>api_token</code></strong>: The API token used for authentication. Ensure this token has the correct permissions to upload and download translations.</li><li><strong><code>base_path</code></strong>: Specifies the base directory for source files. In this example, translations are stored in the <code>./locales</code> directory.</li><li><strong><code>base_url</code></strong>: The base URL for the Crowdin API.</li><li><strong><code>preserve_hierarchy</code></strong>: When set to <code>true</code>, Crowdin will maintain the folder structure of your source files in the project.</li></ul><h3 id="📂-files-configuration" tabindex="-1">📂 Files Configuration <a class="header-anchor" href="#📂-files-configuration" aria-label="Permalink to &quot;📂 Files Configuration&quot;">​</a></h3><p>The <code>files</code> section maps your source files to the paths where translations will be stored. For example:</p><ul><li><strong>Source Path</strong>: Defines the location of the original translation files.</li><li><strong>Translation Path</strong>: Specifies where the translated files will be stored in Crowdin. Placeholders like <code>%two_letters_code%</code> are used to dynamically set the language code in the file paths.</li></ul><h2 id="⬆️-uploading-source-files-to-crowdin" tabindex="-1">⬆️ Uploading Source Files to Crowdin <a class="header-anchor" href="#⬆️-uploading-source-files-to-crowdin" aria-label="Permalink to &quot;⬆️ Uploading Source Files to Crowdin&quot;">​</a></h2><p>Once your Crowdin configuration is set up, you can upload your source files using the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crowdin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sources</span></span></code></pre></div><p>This command uploads all specified source files in your configuration to Crowdin, making them available for translation.</p><h2 id="⬇️-downloading-translations-from-crowdin" tabindex="-1">⬇️ Downloading Translations from Crowdin <a class="header-anchor" href="#⬇️-downloading-translations-from-crowdin" aria-label="Permalink to &quot;⬇️ Downloading Translations from Crowdin&quot;">​</a></h2><p>After translations are completed or updated in Crowdin, you can download them to your project using:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crowdin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span></span></code></pre></div><p>This command fetches the latest translations from Crowdin and saves them according to the paths specified in your configuration file.</p><h2 id="⚙️-best-practices" tabindex="-1">⚙️ Best Practices <a class="header-anchor" href="#⚙️-best-practices" aria-label="Permalink to &quot;⚙️ Best Practices&quot;">​</a></h2><h3 id="🔑-consistent-key-naming" tabindex="-1">🔑 Consistent Key Naming <a class="header-anchor" href="#🔑-consistent-key-naming" aria-label="Permalink to &quot;🔑 Consistent Key Naming&quot;">​</a></h3><p>Ensure translation keys are consistent across all files to avoid confusion and duplication.</p><h3 id="🧹-regular-maintenance" tabindex="-1">🧹 Regular Maintenance <a class="header-anchor" href="#🧹-regular-maintenance" aria-label="Permalink to &quot;🧹 Regular Maintenance&quot;">​</a></h3><p>Periodically review and clean up unused translation keys to keep your files organized and manageable.</p><h3 id="🛠-automate-uploads-and-downloads" tabindex="-1">🛠 Automate Uploads and Downloads <a class="header-anchor" href="#🛠-automate-uploads-and-downloads" aria-label="Permalink to &quot;🛠 Automate Uploads and Downloads&quot;">​</a></h3><p>Integrate the Crowdin CLI commands into your CI/CD pipeline to automate the upload of source files and download of translations, ensuring your translations are always up to date.</p><p>By following this guide, you’ll be able to seamlessly integrate Crowdin into your project, ensuring an efficient and organized approach to managing your internationalization efforts.</p>`,37)])])}const g=a(t,[["render",o]]);export{u as __pageData,g as default};
