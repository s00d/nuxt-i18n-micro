import{_ as s,c as i,o as a,ag as t}from"./chunks/framework.CbO9FoPk.js";const g=JSON.parse('{"title":"üóÇÔ∏è Strategies for Locale Prefix Handling in Nuxt I18n (Version 1.50.0+)","description":"","frontmatter":{},"headers":[],"relativePath":"guide/strategy.md","filePath":"guide/strategy.md","lastUpdated":1739944171000}'),n={name:"guide/strategy.md"};function l(o,e,r,h,p,d){return a(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="üóÇÔ∏è-strategies-for-locale-prefix-handling-in-nuxt-i18n-version-1-50-0" tabindex="-1">üóÇÔ∏è Strategies for Locale Prefix Handling in <code>Nuxt I18n</code> (Version 1.50.0+) <a class="header-anchor" href="#üóÇÔ∏è-strategies-for-locale-prefix-handling-in-nuxt-i18n-version-1-50-0" aria-label="Permalink to &quot;üóÇÔ∏è Strategies for Locale Prefix Handling in \`Nuxt I18n\` (Version 1.50.0+)&quot;">‚Äã</a></h1><h2 id="üìñ-introduction-to-locale-prefix-strategies" tabindex="-1">üìñ Introduction to Locale Prefix Strategies <a class="header-anchor" href="#üìñ-introduction-to-locale-prefix-strategies" aria-label="Permalink to &quot;üìñ Introduction to Locale Prefix Strategies&quot;">‚Äã</a></h2><p>Starting with version 1.50.0, <code>Nuxt I18n</code> introduces a more flexible way to manage how locale prefixes are handled in URLs through the <code>strategy</code> option. This new approach replaces the deprecated <code>includeDefaultLocaleRoute</code> and gives you better control over how localization is applied to different routes in your application.</p><p>The <code>strategy</code> option allows you to choose between different behaviors regarding locale prefixes, providing more fine-grained control over the URLs of your application and how they are structured based on the user&#39;s selected language.</p><h2 id="üö¶-strategy-new-in-version-1-50-0" tabindex="-1">üö¶ <code>strategy</code> (New in Version 1.50.0) <a class="header-anchor" href="#üö¶-strategy-new-in-version-1-50-0" aria-label="Permalink to &quot;üö¶ \`strategy\` (New in Version 1.50.0)&quot;">‚Äã</a></h2><p>The <code>strategy</code> option defines how locale prefixes should be managed across your routes. The available strategies give you varying levels of control over how the locale appears in the URLs.</p><p><strong>Type</strong>: <code>string</code><br><strong>Default</strong>: <code>prefix_except_default</code></p><h2 id="available-strategies" tabindex="-1">Available Strategies: <a class="header-anchor" href="#available-strategies" aria-label="Permalink to &quot;Available Strategies:&quot;">‚Äã</a></h2><h3 id="üõë-no-prefix" tabindex="-1">üõë <strong>no_prefix</strong> <a class="header-anchor" href="#üõë-no-prefix" aria-label="Permalink to &quot;üõë **no_prefix**&quot;">‚Äã</a></h3><p>This strategy ensures that no locale prefix is added to your routes. Instead of modifying the URL, the application will detect and change the locale based on the user&#39;s browser settings or cookies.</p><ul><li><strong>Behavior</strong>: Routes won&#39;t have any locale prefix.</li><li><strong>Locale Detection</strong>: The locale is detected based on the user&#39;s browser language or cookies, and it is changed without altering the URL.</li><li><strong>Restrictions</strong>: This strategy does not support features like Custom paths or Ignore routes.</li></ul><p><strong>Default Locale</strong>: You can set the default locale using an environment variable. For example:</p><ul><li><code>DEFAULT_LOCALE=de npm run dev</code></li><li><code>DEFAULT_LOCALE=de npm run build</code></li></ul><p><strong>Use Case</strong>: Ideal when you want a cleaner URL structure and are relying on automatic language detection rather than explicit locale identifiers in the URL.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;no_prefix&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Example Routes</strong>:</p><ul><li><code>/about</code> (for any language, e.g., <code>en</code>, <code>ru</code>, <code>fr</code>, etc.)</li><li><code>/contact</code> (for any language)</li><li><code>/other</code> (for any language)</li><li><code>/other2</code> (for any language)</li></ul><h3 id="üöß-prefix-except-default" tabindex="-1">üöß <strong>prefix_except_default</strong> <a class="header-anchor" href="#üöß-prefix-except-default" aria-label="Permalink to &quot;üöß **prefix_except_default**&quot;">‚Äã</a></h3><p>With this strategy, all of your routes will include a locale prefix, except for the default language. For the default language, the route will appear without any prefix.</p><ul><li><strong>Behavior</strong>: All routes will include a locale prefix, except for the default language.</li><li><strong>Locale Handling</strong>: This ensures that only the default locale has URLs without a prefix, while all other locales will have a locale-specific prefix.</li></ul><p><strong>Use Case</strong>: Useful when you want all non-default languages to have a distinct URL structure with a locale prefix but prefer the default language to be accessible without the prefix.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prefix_except_default&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Example Routes</strong>:</p><ul><li><code>/about</code> (for the default language, e.g., <code>en</code>)</li><li><code>/ru/about</code> (for Russian)</li><li><code>/fr/about</code> (for French)</li></ul><h3 id="üåç-prefix" tabindex="-1">üåç <strong>prefix</strong> <a class="header-anchor" href="#üåç-prefix" aria-label="Permalink to &quot;üåç **prefix**&quot;">‚Äã</a></h3><p>This strategy ensures that every route in your application will include a locale prefix, regardless of the language. It standardizes the URL structure across all languages.</p><ul><li><strong>Behavior</strong>: All routes will have a locale prefix.</li><li><strong>Locale Handling</strong>: Every route will follow a consistent pattern, with a locale prefix present in the URL for all languages.</li></ul><p><strong>Use Case</strong>: Ideal for situations where you want a consistent URL structure for all languages, ensuring every route includes the locale prefix.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prefix&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Example Routes</strong>:</p><ul><li><code>/en/about</code> (for English)</li><li><code>/ru/about</code> (for Russian)</li><li><code>/fr/about</code> (for French)</li></ul><h3 id="üîÑ-prefix-and-default" tabindex="-1">üîÑ <strong>prefix_and_default</strong> <a class="header-anchor" href="#üîÑ-prefix-and-default" aria-label="Permalink to &quot;üîÑ **prefix_and_default**&quot;">‚Äã</a></h3><p>This strategy combines both the <code>prefix</code> and <code>prefix_except_default</code> behaviors. It ensures that all languages have a locale prefix in their URLs, but the default language also has a non-prefixed URL version available. When the <code>detectBrowserLanguage</code> feature is enabled, the prefixed version of the default language will be preferred.</p><ul><li><strong>Behavior</strong>: Every language gets a URL with a locale prefix, but the default language also has a non-prefixed version.</li><li><strong>Locale Handling</strong>: The default language has both a prefixed and non-prefixed URL, but the prefixed version takes priority when the browser language is detected.</li></ul><p><strong>Use Case</strong>: Best for applications that want to support both prefixed and non-prefixed URLs for the default language while maintaining a locale prefix for other languages.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prefix_and_default&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Example Routes</strong>:</p><ul><li><code>/about</code> (for the default language, e.g., <code>en</code>)</li><li><code>/en/about</code> (for English, with prefix)</li><li><code>/ru/about</code> (for Russian)</li><li><code>/fr/about</code> (for French)</li></ul><h2 id="‚ö†Ô∏è-known-issues-and-best-practices" tabindex="-1">‚ö†Ô∏è Known Issues and Best Practices <a class="header-anchor" href="#‚ö†Ô∏è-known-issues-and-best-practices" aria-label="Permalink to &quot;‚ö†Ô∏è Known Issues and Best Practices&quot;">‚Äã</a></h2><p>While the <code>strategy</code> option provides flexibility, there are some known issues and best practices to keep in mind when using these strategies.</p><h3 id="_1-hydration-mismatch-in-no-prefix-strategy-with-static-generation" tabindex="-1">1. <strong>Hydration Mismatch in <code>no_prefix</code> Strategy with Static Generation</strong> <a class="header-anchor" href="#_1-hydration-mismatch-in-no-prefix-strategy-with-static-generation" aria-label="Permalink to &quot;1. **Hydration Mismatch in \`no_prefix\` Strategy with Static Generation**&quot;">‚Äã</a></h3><p>When using the <code>no_prefix</code> strategy in combination with static site generation (<code>generate</code> mode), you may encounter a <strong>hydration mismatch</strong> error. This happens because the locale is determined dynamically (e.g., via cookies or browser settings) after the static page is rendered, leading to a mismatch between the server-rendered content and the client-side hydration.</p><p><strong>Error Example</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hydration completed but contains mismatches.</span></span></code></pre></div><p><strong>Workaround</strong>:</p><ul><li>Avoid relying on dynamic locale changes during static generation.</li><li>Consider using a different strategy like <code>prefix_except_default</code> or <code>prefix</code> if static generation is a requirement.</li></ul><h3 id="_2-issues-with-localeroute-and-route-resolution" tabindex="-1">2. <strong>Issues with <code>localeRoute</code> and Route Resolution</strong> <a class="header-anchor" href="#_2-issues-with-localeroute-and-route-resolution" aria-label="Permalink to &quot;2. **Issues with \`localeRoute\` and Route Resolution**&quot;">‚Äã</a></h3><p>When using <code>localeRoute</code> to generate links, there can be issues with route resolution, especially if you rely on path-based routing. For example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localeRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// May cause issues with route resolution</span></span></code></pre></div><p><strong>Best Practice</strong>:</p><ul><li>Always use named routes with <code>localeRoute</code> to avoid unnecessary redirects or route resolution problems:</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localeRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Preferred approach</span></span></code></pre></div><p>This ensures that the correct route is resolved regardless of the locale strategy.</p><h3 id="_3-rendering-issues-with-locale-dependent-content-in-no-prefix-strategy" tabindex="-1">3. <strong>Rendering Issues with Locale-Dependent Content in <code>no_prefix</code> Strategy</strong> <a class="header-anchor" href="#_3-rendering-issues-with-locale-dependent-content-in-no-prefix-strategy" aria-label="Permalink to &quot;3. **Rendering Issues with Locale-Dependent Content in \`no_prefix\` Strategy**&quot;">‚Äã</a></h3><p>In the <code>no_prefix</code> strategy, rendering content that depends on the selected locale (e.g., buttons for switching languages) can lead to issues. For example, if you use a <code>v-for</code> loop to render locale buttons, Vue may incorrectly apply the <code>disabled</code> attribute due to hydration mismatches.</p><p><strong>Example Problematic Code</strong>:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> availableLocales</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">locale.code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">locale.isActive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ disabled: locale.isActive }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $switchLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locale.code)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Switch to {{ locale.code }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Issue</strong>:</p><ul><li>Vue may incorrectly apply the <code>disabled</code> attribute during hydration, and it may not update correctly when the locale changes.</li></ul><p><strong>Best Practice</strong>:</p><ul><li>Use a <code>&lt;select&gt;</code> element or another approach that avoids direct DOM manipulation for locale-dependent content:</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $switchLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.value)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;option</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v-for=&quot;locale in availableLocales&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    :key=&quot;locale.code&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    :value=&quot;locale.code&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    :selected=&quot;locale.isActive&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ locale.code }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/option&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This approach avoids hydration issues and ensures that the UI updates correctly when the locale changes.</p><h2 id="üìù-conclusion" tabindex="-1">üìù Conclusion <a class="header-anchor" href="#üìù-conclusion" aria-label="Permalink to &quot;üìù Conclusion&quot;">‚Äã</a></h2><p>The new <code>strategy</code> option, introduced in version 1.50.0, provides more flexibility and control over how locale prefixes are handled in your application. Whether you need a clean, non-prefixed URL structure, or prefer to add locale prefixes for all or some languages, the available strategies allow you to customize your URL structure to fit your needs.</p><h3 id="üìö-best-practices" tabindex="-1">üìö Best Practices: <a class="header-anchor" href="#üìö-best-practices" aria-label="Permalink to &quot;üìö Best Practices:&quot;">‚Äã</a></h3><ul><li><strong>Simplicity for Default Language</strong>: If you don&#39;t need locale prefixes for your default language, use <code>prefix_except_default</code> or <code>prefix_and_default</code>.</li><li><strong>Consistency</strong>: For a consistent URL structure with locale prefixes across all languages, use <code>prefix</code>.</li><li><strong>User Experience</strong>: Consider using <code>no_prefix</code> when you want to rely on browser language detection and avoid cluttering the URL with prefixes.</li><li><strong>Avoid Hydration Issues</strong>: Be cautious with <code>no_prefix</code> in static generation mode and use named routes with <code>localeRoute</code> for better route resolution.</li><li><strong>Handle Locale-Dependent Content Carefully</strong>: Use <code>&lt;select&gt;</code> or other approaches to avoid hydration mismatches when rendering locale-dependent content.</li></ul><p>By understanding and applying these strategies and best practices, you can ensure that your application&#39;s localization behavior fits your project&#39;s requirements while avoiding common pitfalls.</p>`,68)])])}const u=s(n,[["render",l]]);export{g as __pageData,u as default};
