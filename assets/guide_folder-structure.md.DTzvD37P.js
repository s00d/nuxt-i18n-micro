import{_ as s,c as e,o as n,ag as i}from"./chunks/framework.CbO9FoPk.js";const u=JSON.parse('{"title":"📂 Folder Structure Guide","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/folder-structure.md","filePath":"guide/folder-structure.md","lastUpdated":1724243643000}'),t={name:"guide/folder-structure.md"};function o(l,a,r,p,d,c){return n(),e("div",null,[...a[0]||(a[0]=[i(`<h1 id="📂-folder-structure-guide" tabindex="-1">📂 Folder Structure Guide <a class="header-anchor" href="#📂-folder-structure-guide" aria-label="Permalink to &quot;📂 Folder Structure Guide&quot;">​</a></h1><h2 id="📖-introduction" tabindex="-1">📖 Introduction <a class="header-anchor" href="#📖-introduction" aria-label="Permalink to &quot;📖 Introduction&quot;">​</a></h2><p>Organizing your translation files effectively is essential for maintaining a scalable and efficient internationalization (i18n) system. <code>Nuxt I18n Micro</code> simplifies this process by offering a clear approach to managing global and page-specific translations. This guide will walk you through the recommended folder structure and explain how <code>Nuxt I18n Micro</code> handles these translations.</p><h2 id="🗂️-recommended-folder-structure" tabindex="-1">🗂️ Recommended Folder Structure <a class="header-anchor" href="#🗂️-recommended-folder-structure" aria-label="Permalink to &quot;🗂️ Recommended Folder Structure&quot;">​</a></h2><p><code>Nuxt I18n Micro</code> organizes translations into global files and page-specific files within the <code>pages</code> directory. This ensures that only the necessary translation data is loaded when required, optimizing both performance and organization.</p><h3 id="🔧-basic-structure" tabindex="-1">🔧 Basic Structure <a class="header-anchor" href="#🔧-basic-structure" aria-label="Permalink to &quot;🔧 Basic Structure&quot;">​</a></h3><p>Here’s a basic example of the folder structure you should follow:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  /locales</span></span>
<span class="line"><span>  ├── /pages</span></span>
<span class="line"><span>  │   ├── /index</span></span>
<span class="line"><span>  │   │   ├── en.json</span></span>
<span class="line"><span>  │   │   ├── fr.json</span></span>
<span class="line"><span>  │   │   └── ar.json</span></span>
<span class="line"><span>  │   ├── /about</span></span>
<span class="line"><span>  │   │   ├── en.json</span></span>
<span class="line"><span>  │   │   ├── fr.json</span></span>
<span class="line"><span>  │   │   └── ar.json</span></span>
<span class="line"><span>  ├── en.json</span></span>
<span class="line"><span>  ├── fr.json</span></span>
<span class="line"><span>  └── ar.json</span></span></code></pre></div><h3 id="📄-explanation-of-structure" tabindex="-1">📄 Explanation of Structure <a class="header-anchor" href="#📄-explanation-of-structure" aria-label="Permalink to &quot;📄 Explanation of Structure&quot;">​</a></h3><h4 id="_1-🌍-global-translation-files" tabindex="-1">1. 🌍 Global Translation Files <a class="header-anchor" href="#_1-🌍-global-translation-files" aria-label="Permalink to &quot;1. 🌍 Global Translation Files&quot;">​</a></h4><ul><li><p><strong>Path:</strong> <code>/locales/{locale}.json</code> (e.g., <code>/locales/en.json</code>)</p></li><li><p><strong>Purpose:</strong> These files contain translations that are shared across the entire application. This is useful for common elements like navigation menus, headers, footers, or any text that appears on multiple pages.</p><p><strong>Example Content (<code>/locales/en.json</code>):</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;menu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;about&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;About Us&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;contact&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Contact&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;footer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;copyright&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;© 2024 Your Company&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h4 id="_2-📄-page-specific-translation-files" tabindex="-1">2. 📄 Page-Specific Translation Files <a class="header-anchor" href="#_2-📄-page-specific-translation-files" aria-label="Permalink to &quot;2. 📄 Page-Specific Translation Files&quot;">​</a></h4><ul><li><p><strong>Path:</strong> <code>/locales/pages/{routeName}/{locale}.json</code> (e.g., <code>/locales/pages/index/en.json</code>)</p></li><li><p><strong>Purpose:</strong> These files are used for translations that are specific to individual pages. This allows you to load only the necessary translations when a user visits a particular page, which enhances performance by reducing the amount of data that needs to be loaded.</p><p><strong>Example Content (<code>/locales/pages/index/en.json</code>):</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to Our Website&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;We offer a wide range of products and services to meet your needs.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Example Content (<code>/locales/pages/about/en.json</code>):</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;About Us&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Learn more about our mission, vision, and values.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="📂-handling-dynamic-routes-and-nested-paths" tabindex="-1">📂 Handling Dynamic Routes and Nested Paths <a class="header-anchor" href="#📂-handling-dynamic-routes-and-nested-paths" aria-label="Permalink to &quot;📂 Handling Dynamic Routes and Nested Paths&quot;">​</a></h3><p><code>Nuxt I18n Micro</code> automatically transforms dynamic segments and nested paths in routes into a flat folder structure using a specific renaming convention. This ensures that all translations are stored in a consistent and easily accessible manner.</p><h4 id="dynamic-route-translation-folder-structure" tabindex="-1">Dynamic Route Translation Folder Structure <a class="header-anchor" href="#dynamic-route-translation-folder-structure" aria-label="Permalink to &quot;Dynamic Route Translation Folder Structure&quot;">​</a></h4><p>When dealing with dynamic routes, such as <code>/products/[id]</code>, the module converts the dynamic segment <code>[id]</code> into a static format within the file structure.</p><p><strong>Example Folder Structure for Dynamic Routes:</strong></p><p>For a route like <code>/products/[id]</code>, the translation files would be stored in a folder named <code>products-id</code>:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  /locales/pages</span></span>
<span class="line"><span>  ├── /products-id</span></span>
<span class="line"><span>  │   ├── en.json</span></span>
<span class="line"><span>  │   ├── fr.json</span></span>
<span class="line"><span>  │   └── ar.json</span></span></code></pre></div><p><strong>Example Folder Structure for Nested Dynamic Routes:</strong></p><p>For a nested route like <code>/products/key/[id]</code>, the translation files would be stored in a folder named <code>products-key-id</code>:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  /locales/pages</span></span>
<span class="line"><span>  ├── /products-key-id</span></span>
<span class="line"><span>  │   ├── en.json</span></span>
<span class="line"><span>  │   ├── fr.json</span></span>
<span class="line"><span>  │   └── ar.json</span></span></code></pre></div><p><strong>Example Folder Structure for Multi-Level Nested Routes:</strong></p><p>For a more complex nested route like <code>/products/category/[id]/details</code>, the translation files would be stored in a folder named <code>products-category-id-details</code>:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  /locales/pages</span></span>
<span class="line"><span>  ├── /products-category-id-details</span></span>
<span class="line"><span>  │   ├── en.json</span></span>
<span class="line"><span>  │   ├── fr.json</span></span>
<span class="line"><span>  │   └── ar.json</span></span></code></pre></div><h3 id="🛠-customizing-the-directory-structure" tabindex="-1">🛠 Customizing the Directory Structure <a class="header-anchor" href="#🛠-customizing-the-directory-structure" aria-label="Permalink to &quot;🛠 Customizing the Directory Structure&quot;">​</a></h3><p>If you prefer to store translations in a different directory, <code>Nuxt I18n Micro</code> allows you to customize the directory where translation files are stored. You can configure this in your <code>nuxt.config.ts</code> file.</p><p><strong>Example: Customizing the Translation Directory</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i18n: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    translationDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;i18n&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Custom directory path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>This will instruct <code>Nuxt I18n Micro</code> to look for translation files in the <code>/i18n</code> directory instead of the default <code>/locales</code> directory.</p><h2 id="⚙️-how-translations-are-loaded" tabindex="-1">⚙️ How Translations are Loaded <a class="header-anchor" href="#⚙️-how-translations-are-loaded" aria-label="Permalink to &quot;⚙️ How Translations are Loaded&quot;">​</a></h2><h3 id="🌍-dynamic-locale-routes" tabindex="-1">🌍 Dynamic Locale Routes <a class="header-anchor" href="#🌍-dynamic-locale-routes" aria-label="Permalink to &quot;🌍 Dynamic Locale Routes&quot;">​</a></h3><p><code>Nuxt I18n Micro</code> uses dynamic locale routes to load translations efficiently. When a user visits a page, the module determines the appropriate locale and loads the corresponding translation files based on the current route and locale.</p><p>For example:</p><ul><li>Visiting <code>/en/index</code> will load translations from <code>/locales/pages/index/en.json</code>.</li><li>Visiting <code>/fr/about</code> will load translations from <code>/locales/pages/about/fr.json</code>.</li></ul><p>This method ensures that only the necessary translations are loaded, optimizing both server load and client-side performance.</p><h3 id="💾-caching-and-pre-rendering" tabindex="-1">💾 Caching and Pre-rendering <a class="header-anchor" href="#💾-caching-and-pre-rendering" aria-label="Permalink to &quot;💾 Caching and Pre-rendering&quot;">​</a></h3><p>To further enhance performance, <code>Nuxt I18n Micro</code> supports caching and pre-rendering of translation files:</p><ul><li><strong>Caching</strong>: Once a translation file is loaded, it’s cached for subsequent requests, reducing the need to repeatedly fetch the same data.</li><li><strong>Pre-rendering</strong>: During the build process, you can pre-render translation files for all configured locales and routes, allowing them to be served directly from the server without runtime delays.</li></ul><h2 id="📝-best-practices" tabindex="-1">📝 Best Practices <a class="header-anchor" href="#📝-best-practices" aria-label="Permalink to &quot;📝 Best Practices&quot;">​</a></h2><h3 id="📂-use-page-specific-files-wisely" tabindex="-1">📂 Use Page-Specific Files Wisely <a class="header-anchor" href="#📂-use-page-specific-files-wisely" aria-label="Permalink to &quot;📂 Use Page-Specific Files Wisely&quot;">​</a></h3><p>Leverage page-specific files to avoid bloating global translation files. This keeps each page’s translations lean and fast to load, which is especially important for pages with complex or large content.</p><h3 id="🔑-keep-translation-keys-consistent" tabindex="-1">🔑 Keep Translation Keys Consistent <a class="header-anchor" href="#🔑-keep-translation-keys-consistent" aria-label="Permalink to &quot;🔑 Keep Translation Keys Consistent&quot;">​</a></h3><p>Use consistent naming conventions for your translation keys across files. This helps maintain clarity and prevents issues when managing translations, especially as your application grows.</p><h3 id="🗂️-organize-translations-by-context" tabindex="-1">🗂️ Organize Translations by Context <a class="header-anchor" href="#🗂️-organize-translations-by-context" aria-label="Permalink to &quot;🗂️ Organize Translations by Context&quot;">​</a></h3><p>Group related translations together within your files. For example, group all button labels under a <code>buttons</code> key and all form-related texts under a <code>forms</code> key. This not only improves readability but also makes it easier to manage translations across different locales.</p><h3 id="🧹-regularly-clean-up-unused-translations" tabindex="-1">🧹 Regularly Clean Up Unused Translations <a class="header-anchor" href="#🧹-regularly-clean-up-unused-translations" aria-label="Permalink to &quot;🧹 Regularly Clean Up Unused Translations&quot;">​</a></h3><p>Over time, your application might accumulate unused translation keys, especially if features are removed or restructured. Periodically review and clean up your translation files to keep them lean and maintainable.</p>`,49)])])}const g=s(t,[["render",o]]);export{u as __pageData,g as default};
