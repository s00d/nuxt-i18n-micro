import{_ as s,c as a,o as n,ag as t}from"./chunks/framework.CbO9FoPk.js";const g=JSON.parse('{"title":"📢 Events","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/events.md","filePath":"api/events.md","lastUpdated":1727601432000}'),e={name:"api/events.md"};function l(h,i,p,r,o,k){return n(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="📢-events" tabindex="-1">📢 Events <a class="header-anchor" href="#📢-events" aria-label="Permalink to &quot;📢 Events&quot;">​</a></h1><h2 id="🔄-i18n-register" tabindex="-1">🔄 <code>i18n:register</code> <a class="header-anchor" href="#🔄-i18n-register" aria-label="Permalink to &quot;🔄 \`i18n:register\`&quot;">​</a></h2><p>The <code>i18n:register</code> event in <code>Nuxt I18n Micro</code> enables dynamic addition of translations to your application&#39;s global i18n context, making the internationalization process seamless and flexible. This event allows you to integrate new translations as needed, enhancing your application&#39;s localization capabilities.</p><h3 id="📝-event-details" tabindex="-1">📝 Event Details <a class="header-anchor" href="#📝-event-details" aria-label="Permalink to &quot;📝 Event Details&quot;">​</a></h3><ul><li><p><strong>Purpose</strong>:</p><ul><li>Allows dynamic incorporation of additional translations into the existing set for a specific locale.</li></ul></li><li><p><strong>Payload</strong>:</p><ul><li><strong><code>register</code></strong>: <ul><li>A function provided by the event that takes two arguments: <ul><li><strong><code>translations</code></strong> (<code>Translations</code>): <ul><li>An object containing key-value pairs representing translations, organized according to the <code>Translations</code> interface.</li></ul></li><li><strong><code>locale</code></strong> (<code>string</code>, optional): <ul><li>The locale code (e.g., <code>&#39;en&#39;</code>, <code>&#39;ru&#39;</code>) for which the translations are registered. Defaults to the locale provided by the event if not specified.</li></ul></li></ul></li></ul></li></ul></li><li><p><strong>Behavior</strong>:</p><ul><li>When triggered, the <code>register</code> function merges the new translations into the global context for the specified locale, updating the available translations across the application.</li></ul></li></ul><h3 id="💡-example-usage" tabindex="-1">💡 Example Usage <a class="header-anchor" href="#💡-example-usage" aria-label="Permalink to &quot;💡 Example Usage&quot;">​</a></h3><p>The following example demonstrates how to use the <code>i18n:register</code> event to dynamically add translations:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nuxt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;i18n:register&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">translations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;farewell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Goodbye&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, locale);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="🛠️-explanation" tabindex="-1">🛠️ Explanation <a class="header-anchor" href="#🛠️-explanation" aria-label="Permalink to &quot;🛠️ Explanation&quot;">​</a></h3><ul><li><p><strong>Triggering the Event</strong>:</p><ul><li>The event is hooked into the <code>i18n:register</code> lifecycle event provided by <code>Nuxt I18n Micro</code>.</li></ul></li><li><p><strong>Adding Translations</strong>:</p><ul><li>The example registers English translations for <code>&quot;greeting&quot;</code> and <code>&quot;farewell&quot;</code>.</li><li>The <code>register</code> function merges these translations into the existing set for the provided locale.</li></ul></li></ul><h3 id="🔗-key-benefits" tabindex="-1">🔗 Key Benefits <a class="header-anchor" href="#🔗-key-benefits" aria-label="Permalink to &quot;🔗 Key Benefits&quot;">​</a></h3><ul><li><p><strong>Dynamic Updates</strong>:</p><ul><li>Easily update or add translations without needing to redeploy your entire application.</li></ul></li><li><p><strong>Localization Flexibility</strong>:</p><ul><li>Supports real-time localization adjustments based on user or application needs.</li></ul></li></ul><p>Using the <code>i18n:register</code> event, you can ensure that your application&#39;s localization strategy remains flexible and adaptable, enhancing the overall user experience.</p><hr><h2 id="🛠️-modifying-translations-with-plugins" tabindex="-1">🛠️ Modifying Translations with Plugins <a class="header-anchor" href="#🛠️-modifying-translations-with-plugins" aria-label="Permalink to &quot;🛠️ Modifying Translations with Plugins&quot;">​</a></h2><p>To modify translations dynamically in your Nuxt application, using plugins is recommended. Plugins provide a structured way to handle localization updates, especially when working with modules or external translation files.</p><h3 id="registering-the-plugin" tabindex="-1"><strong>Registering the Plugin</strong> <a class="header-anchor" href="#registering-the-plugin" aria-label="Permalink to &quot;**Registering the Plugin**&quot;">​</a></h3><p>If you&#39;re using a module, register the plugin where translation modifications will occur by adding it to your module’s configuration:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  src: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./plugins/extend_locales&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>This registers the plugin located at <code>./plugins/extend_locales</code>, which will handle dynamic loading and registration of translations.</p><h3 id="implementing-the-plugin" tabindex="-1"><strong>Implementing the Plugin</strong> <a class="header-anchor" href="#implementing-the-plugin" aria-label="Permalink to &quot;**Implementing the Plugin**&quot;">​</a></h3><p>In the plugin, you can manage locale modifications. Here&#39;s an example implementation in a Nuxt plugin:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineNuxtPlugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#app&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nuxtApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Function to load translations from JSON files and register them</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadTranslations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> translations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`../locales/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.json\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> translations.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Error loading translations for language: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Hook into the &#39;i18n:register&#39; event to dynamically add translations</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // eslint-disable-next-line @typescript-eslint/ban-ts-comment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // @ts-expect-error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nuxtApp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;i18n:register&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">translations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">locale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> translations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadTranslations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locale)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (translations) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(translations, locale)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="📝-detailed-explanation" tabindex="-1">📝 Detailed Explanation <a class="header-anchor" href="#📝-detailed-explanation" aria-label="Permalink to &quot;📝 Detailed Explanation&quot;">​</a></h3><ol><li><strong>Loading Translations</strong>:</li></ol><ul><li>The <code>loadTranslations</code> function dynamically imports translation files based on the locale. The files are expected to be in the <code>locales</code> directory and named according to locale codes (e.g., <code>en.json</code>, <code>de.json</code>).</li><li>On successful loading, translations are returned; otherwise, an error is logged.</li></ul><ol start="2"><li><strong>Registering Translations</strong>:</li></ol><ul><li>The plugin hooks into the <code>i18n:register</code> event using <code>nuxtApp.hook</code>.</li><li>When the event is triggered, the <code>register</code> function is called with the loaded translations and the corresponding locale.</li><li>This merges the new translations into the global i18n context for the specified locale, updating the available translations throughout the application.</li></ul><h3 id="🔗-benefits-of-using-plugins-for-translation-modifications" tabindex="-1">🔗 Benefits of Using Plugins for Translation Modifications <a class="header-anchor" href="#🔗-benefits-of-using-plugins-for-translation-modifications" aria-label="Permalink to &quot;🔗 Benefits of Using Plugins for Translation Modifications&quot;">​</a></h3><ul><li><p><strong>Separation of Concerns</strong>:</p><ul><li>Encapsulate localization logic separately from the main application code, making management and maintenance easier.</li></ul></li><li><p><strong>Dynamic and Scalable</strong>:</p><ul><li>By dynamically loading and registering translations, you can update content without requiring a full application redeployment, which is especially useful for applications with frequently updated or multilingual content.</li></ul></li><li><p><strong>Enhanced Localization Flexibility</strong>:</p><ul><li>Plugins allow you to modify or extend translations as needed, providing a more adaptable and responsive localization strategy that meets user preferences or business requirements.</li></ul></li></ul><p>By adopting this approach, you can efficiently expand and modify your application&#39;s localization through a structured and maintainable process using plugins, keeping internationalization adaptive to changing needs and improving the overall user experience.</p>`,31)])])}const c=s(e,[["render",l]]);export{g as __pageData,c as default};
